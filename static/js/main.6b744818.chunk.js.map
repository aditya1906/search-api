{"version":3,"sources":["components/SearchBox.js","components/Card.js","components/CardList.js","components/Loading.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["SearchBox","className","onChange","this","props","onSearchChange","placeholder","type","name","Component","Card","imgSrc","email","src","alt","CardList","users","CardArray","map","user","i","first","last","key","picture","large","Loading","Scroll","style","height","overflowY","border","children","React","App","event","searchUser","state","fetchUsers","filter","toLowerCase","includes","target","value","setState","animate","fetch","then","response","json","data","results","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"+OAQeA,G,uLAJb,OAAO,2BAAOC,UAAU,eAAeC,SAAUC,KAAKC,MAAMC,eAAgBC,YAAY,cAAcC,KAAK,OAAOC,KAAK,kB,GAFjGC,cCeTC,E,iLAfJ,IAAD,EACwBP,KAAKC,MAA7BO,EADA,EACAA,OAAQH,EADR,EACQA,KAAMI,EADd,EACcA,MAEtB,OACC,yBAAKX,UAAU,QACd,yBAAKY,IAAKF,EAAQG,IAAKN,IACvB,yBAAKP,UAAU,eACd,uBAAGA,UAAU,QAAQO,GACrB,uBAAGP,UAAU,SAASW,S,GATRH,aCoBJM,E,iLAjBJ,IACDC,EAAUb,KAAKC,MAAfY,MACFC,EAAYD,EAAME,KAAI,SAACC,EAAMC,GAClC,IAAMZ,EAAI,UAAMQ,EAAMI,GAAGZ,KAAKa,MAApB,YAA6BL,EAAMI,GAAGZ,KAAKc,MACrD,OACC,kBAAC,EAAD,CACCC,IAAKH,EACLZ,KAAMA,EACNI,MAAOI,EAAMI,GAAGR,MAChBD,OAAQK,EAAMI,GAAGI,QAAQC,WAI5B,OAAO,yBAAKxB,UAAU,cAAcgB,O,GAdfR,aCURiB,E,iLATb,OACC,oCACC,yBAAKzB,UAAU,YACf,2C,GALkBQ,aCgBPkB,E,iLAdb,OACC,yBACCC,MAAO,CACNC,OAAQ,OACRC,UAAW,SACXC,OAAQ,sBAGR5B,KAAKC,MAAM4B,c,GAVKC,IAAMxB,WC2DZyB,E,YArDd,aAAe,IAAD,8BACb,+CAiBD7B,eAAiB,SAAA8B,GAChB,IAAMC,EAAa,EAAKC,MAAMC,WAAWC,QACxC,SAAApB,GAAI,OACHA,EAAKX,KAAKa,MACRmB,cACAC,SAASN,EAAMO,OAAOC,MAAMH,gBAC9BrB,EAAKX,KAAKc,KACRkB,cACAC,SAASN,EAAMO,OAAOC,MAAMH,gBAC9BrB,EAAKP,MACH4B,cACAC,SAASN,EAAMO,OAAOC,MAAMH,kBAEhC,EAAKI,SAAS,CAAE5B,MAAOoB,IACvB,EAAKQ,SAAS,CAAEC,SAAU,EAAKR,MAAMQ,WA9BrC,EAAKR,MAAQ,CACZC,WAAY,GACZtB,MAAO,GACP6B,SAAS,GALG,E,iFAQO,IAAD,OACnBC,MACC,8EAECC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACL,EAAKN,SAAS,CAAEN,WAAYY,EAAKC,UACjC,EAAKP,SAAS,CAAE5B,MAAOkC,EAAKC,e,+BAoB9B,OACC,yBAAKlD,UAAU,OACd,kDACA,kBAAC,EAAD,CAAWI,eAAgBF,KAAKE,iBAChC,kBAAC,EAAD,KACmC,IAAjCF,KAAKkC,MAAMC,WAAWc,OACtB,yBAAKnD,UAAWE,KAAKkC,MAAMQ,QAAU,OAAS,QAC7C,kBAAC,EAAD,CAAU7B,MAAOb,KAAKkC,MAAMrB,SAG7B,kBAAC,EAAD,Y,GA9CYP,aCKE4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,iB","file":"static/js/main.6b744818.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass SearchBox extends Component {\n\trender() {\n\t\treturn <input className=\"search-field\" onChange={this.props.onSearchChange} placeholder=\"Search User\" type=\"text\" name=\"textInput\" />;\n\t}\n}\n\nexport default SearchBox;\n","import React, { Component } from \"react\";\nclass Card extends Component {\n\trender() {\n\t\tconst { imgSrc, name, email } = this.props;\n\n\t\treturn (\n\t\t\t<div className=\"card\">\n\t\t\t\t<img src={imgSrc} alt={name} />\n\t\t\t\t<div className=\"description\">\n\t\t\t\t\t<p className=\"name\">{name}</p>\n\t\t\t\t\t<p className=\"email\">{email}</p>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Card;\n","import React, { Component } from \"react\";\nimport Card from \"./Card\";\n\nclass CardList extends Component {\n\trender() {\n\t\tconst { users } = this.props;\n\t\tconst CardArray = users.map((user, i) => {\n\t\t\tconst name = `${users[i].name.first} ${users[i].name.last}`;\n\t\t\treturn (\n\t\t\t\t<Card\n\t\t\t\t\tkey={i}\n\t\t\t\t\tname={name}\n\t\t\t\t\temail={users[i].email}\n\t\t\t\t\timgSrc={users[i].picture.large}\n\t\t\t\t/>\n\t\t\t);\n\t\t});\n\t\treturn <div className=\"card-group\">{CardArray}</div>;\n\t}\n}\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass Loading extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"loading\" />\n\t\t\t\t<p>Loading</p>\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default Loading;\n","import React from \"react\";\n\nclass Scroll extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div\n\t\t\t\tstyle={{\n\t\t\t\t\theight: \"75vh\",\n\t\t\t\t\toverflowY: \"scroll\",\n\t\t\t\t\tborder: \"1px solid #ffd700\"\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{this.props.children}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Scroll;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport SearchBox from \"./components/SearchBox\";\nimport CardList from \"./components/CardList\";\nimport Loading from \"./components/Loading\";\nimport Scroll from \"./components/Scroll\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tfetchUsers: [],\n\t\t\tusers: [],\n\t\t\tanimate: true\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tfetch(\n\t\t\t\"https://randomuser.me/api/?results=10&nat=au,nz&inc=name,nat,picture,email\"\n\t\t)\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => {\n\t\t\t\tthis.setState({ fetchUsers: data.results });\n\t\t\t\tthis.setState({ users: data.results });\n\t\t\t});\n\t}\n\tonSearchChange = event => {\n\t\tconst searchUser = this.state.fetchUsers.filter(\n\t\t\tuser =>\n\t\t\t\tuser.name.first\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(event.target.value.toLowerCase()) ||\n\t\t\t\tuser.name.last\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(event.target.value.toLowerCase()) ||\n\t\t\t\tuser.email\n\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t.includes(event.target.value.toLowerCase())\n\t\t);\n\t\tthis.setState({ users: searchUser });\n\t\tthis.setState({ animate: !this.state.animate });\n\t};\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"app\">\n\t\t\t\t<h1>Awesome Search API</h1>\n\t\t\t\t<SearchBox onSearchChange={this.onSearchChange} />\n\t\t\t\t<Scroll>\n\t\t\t\t\t{this.state.fetchUsers.length !== 0 ? (\n\t\t\t\t\t\t<div className={this.state.animate ? \"fade\" : \"hide\"}>\n\t\t\t\t\t\t\t<CardList users={this.state.users} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<Loading />\n\t\t\t\t\t)}\n\t\t\t\t</Scroll>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}